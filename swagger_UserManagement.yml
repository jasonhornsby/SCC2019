swagger: "2.0"
info:
  description: "User Management"
  version: "1.0.0"
  title:  "User Management"
basePath: "/auth"
tags:
- name: "user"
  description: "All functionalities about user registration and authentication."
schemes:
- "https"
- "http"
consumes:
  - application/json
produces:
  - application/json

# Paths supported by the server application
paths:
  /users:
    get:
      summary: Gets a list of all users.
      description: Get all users
      operationId: getListOfUsers
      tags:
        - user
      responses:
        200:
          description: dictionary with to lists of fileobject-descriptions
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                username:
                  type: string
              required:
                - id
                - username

  /users/{id}:
    get:
      summary: Gets information about one user.
      description: Information of one user
      operationId: getUserById
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
      responses:
        200:
          description: dictionary with to lists of fileobject-descriptions
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
            required:
              - id
              - username


  /register:
    post:
      summary: Adds a new user with a given username and password. Return the JWT-Authentication token.
      description: Register new user
      operationId: newUser
      tags:
        - user
      parameters:
        - in: body
          name: user
          description: username and password of new user
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
              username:
                type: string
            required:
              - password
              - username
      responses:
        201:
          description: newly registered user
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
              token:
                type: string
            required:
              - id
              - username
              - token

  /login:
    post:
      summary: Return JWT token of the user with the given username if password is correct.
      description: Log in user
      operationId: login
      tags:
        - user
      parameters:
        - in: body
          name: user
          description: username and password of user
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
              username:
                type: string
            required:
              - password
              - username
      responses:
        200:
          description: token and information for logged in user
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
              token:
                type: string
            required:
              - id
              - username
              - token
        401:
          description: Unauthorized- Wrong password